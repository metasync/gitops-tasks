apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: bootstrap-quay-repos
  namespace: tekton-ci
spec:
  params:
    - name: project
      description: GitOps project
      type: string
    - name: apps
      description: GitOps applications
      type: string
    - name: orgs
      description: Quay organizations for GitOps
      type: string
    - name: visibility
      description: Quay repository visibility (private or public)
      type: string
    - name: enable_mirror
      description: Flag to enable external Quay repository mirroring
      type: string
      default: "false"
    - name: image
      description: GitOps CLI image to run the task
      type: string
      default: quay.io/metasync/gitops-cli:0.1.5-rel.0
    - name: verbose
      description: Log the commands that are executed
      type: string
      default: "false"
  stepTemplate:
    envFrom:
      - configMapRef:
          name: gitops-configmap
    env:
      - name: VERBOSE
        value: $(params.verbose)
  steps:
    - name: create-quay-repos
      image: $(params.image)
      script: |
        #!/bin/sh

        if [ "${VERBOSE}" = "true" ] ; then
          set -x
        fi

        for app in $(echo $(params.apps) | tr "," "\n")
        do
          for org in $(echo $(params.orgs) | tr "," "\n")
          do
            http_code=$(curl -s \
              -H "Content-Type: application/json" \
              -H "X-TektonCI-Event: quay-repo" \
              -o result.json -w '%{http_code}\n' \
              -d "{\"project\": \"$(params.project)\", \"app\": \"${app}\", \"org\": \"${org}\", \"visibility\": \"$(params.visibility)\", \"enable_mirror\": \"$(params.enable_mirror)\" }" \
              -X POST ${TEKTON_CI_SERVER})

            if [ "${http_code}" = "202" ]
            then
              echo "Quay repo for '${org}/$(params.project)_${app}' is being created. "
              event_id=$(cat result.json | jq -r .eventID)
              pipelines="${pipelines:+${pipelines} }${org}/$(params.project)_${app}|${event_id}"
            else
              echo "Failed to create Quay repo for '${org}/$(params.project)_${app}': "
              cat result.json | jq
              exit 1
            fi
          done
        done

        while true
        do
          sleep 5
          completed=true
          for pipeline in ${pipelines}
          do
            app_name=${pipeline%%|*}
            event_id=${pipeline##*|}
            status=$(kubectl -n tekton-ci get pr -l \
              triggers.tekton.dev/triggers-eventid=${event_id} -o json | \
              jq -r '.items[]|select(.kind == "PipelineRun").status.conditions[]|select(.type == "Succeeded").status')
            if [ "$status" == "Unknown" ]
            then
              next_pipelines="${next_pipelines:+${next_pipelines} }${app_name}|${event_id}"
              completed=false
            else
              if [ "${status}" == "True" ]
              then
                echo "Quay repo for '${app_name}' is created successfully."
              else
                echo "Failed to create Quay repo for '${app_name}'."
              fi
            fi
          done
          pipelines="${next_pipelines}"
          next_pipelines=""
          if [ "${completed}" = true ]
          then
            break
          fi
        done
